from crewai import Agent, Task, Crew
import os
import psycopg2
import logging
from dotenv import load_dotenv
import openai
from langchain.chat_models import ChatOpenAI
import litellm

# Configura√ß√£o de logs
logging.basicConfig(level=logging.INFO, format="%(message)s")
logger = logging.getLogger(__name__)

# Carregar vari√°veis do .env
load_dotenv()
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
PINECONE_API_KEY = os.getenv("PINECONE_API_KEY")
NEON_DB_URL = os.getenv("NEON_DB_URL")
OPENAI_API_BASE = os.getenv("OPENAI_API_BASE", "https://api.openai.com/v1")

# Configura√ß√£o expl√≠cita do OpenAI
openai.api_key = OPENAI_API_KEY
os.environ["OPENAI_API_KEY"] = OPENAI_API_KEY

# Configura√ß√£o expl√≠cita do LiteLLM
litellm.api_key = OPENAI_API_KEY
litellm.set_verbose = False  # Desativar logs verbosos que podem causar problemas

# Configurar o modelo LLM base para todos os agentes
llm = ChatOpenAI(
    model="gpt-4-turbo",
    temperature=0.7,
    api_key=OPENAI_API_KEY,
    openai_api_base=OPENAI_API_BASE
)

# Criar os agentes
AG1 = Agent(
    name="Classificador de Setor",
    role="Classifica√ß√£o de chamados por setor",
    goal="Classificar corretamente os chamados nos setores adequados.",
    backstory="""Especialista em triagem de chamados para setores Financeiro, Jur√≠dico, Marketing ou Vendas.
    Analiso o conte√∫do do chamado e classifico baseado nas seguintes regras:
    - Financeiro: Quest√µes relacionadas a pagamentos, notas fiscais, or√ßamentos
    - Jur√≠dico: Quest√µes legais, contratos, acessos restritos
    - Marketing: Quest√µes de publicidade, campanhas, relat√≥rios de marketing
    - Vendas: Quest√µes comerciais, propostas, atendimento ao cliente""",
    llm=llm
)

AG2 = Agent(
    name="Classificador de Prioridade",
    role="Classifica√ß√£o de chamados por prioridade",
    goal="Definir a prioridade dos chamados.",
    backstory="""Avaliador da urg√™ncia de chamados como Urgente, Intermedi√°rio ou Normal.
    Analiso o conte√∫do e classifico baseado nas seguintes regras:
    - Urgente: Problemas que impedem opera√ß√µes cr√≠ticas, causam perdas financeiras ou afetam muitos usu√°rios
    - Intermedi√°rio: Problemas que afetam parcialmente as opera√ß√µes ou t√™m workaround dispon√≠vel
    - Normal: D√∫vidas gerais, melhorias ou problemas com baixo impacto""",
    llm=llm
)

AG3 = Agent(
    name="Analista T√©cnico",
    role="An√°lise t√©cnica dos chamados",
    goal="Fornecer uma an√°lise t√©cnica detalhada.",
    backstory="""Especialista t√©cnico que analisa problemas e prop√µe solu√ß√µes.
    Para cada chamado, devo:
    1. Identificar o sistema ou √°rea afetada
    2. Avaliar o impacto t√©cnico do problema
    3. Propor poss√≠veis solu√ß√µes ou pr√≥ximos passos
    4. Documentar qualquer informa√ß√£o t√©cnica relevante""",
    llm=llm
)

AG4 = Agent(
    name="Gerenciador de Chamado",
    role="Gerenciamento do fluxo de chamados",
    goal="Encaminhar chamados e monitorar andamento.",
    backstory="""Coordenador que garante o fluxo correto do chamado.
    Minhas responsabilidades incluem:
    1. Verificar se o setor designado √© apropriado
    2. Confirmar se a prioridade est√° adequada
    3. Garantir que a an√°lise t√©cnica est√° completa
    4. Definir pr√≥ximos passos e respons√°veis""",
    llm=llm
)

AG5 = Agent(
    name="Gerador de Relat√≥rio",
    role="Gera√ß√£o de relat√≥rios finais",
    goal="Criar um relat√≥rio detalhado para cada chamado resolvido.",
    backstory="""Respons√°vel por documentar todo o processo do chamado.
    Meu relat√≥rio deve incluir:
    1. Setor classificado e justificativa
    2. N√≠vel de prioridade e motivo
    3. An√°lise t√©cnica detalhada
    4. A√ß√µes tomadas ou recomendadas
    5. Status atual e pr√≥ximos passos""",
    llm=llm
)

# Criar as tasks com expected_output
Task_AG1 = Task(
    description="""Analise o chamado e classifique em um dos setores: Financeiro, Jur√≠dico, Marketing ou Vendas.
    Use o formato exato:
    Thought: Analiso o conte√∫do do chamado...
    Final Answer: [SETOR] - Justificativa da classifica√ß√£o""",
    expected_output="SETOR (em mai√∫sculo) seguido de justificativa",
    agent=AG1
)

Task_AG2 = Task(
    description="""Defina a prioridade do chamado como Urgente, Intermedi√°rio ou Normal.
    Use o formato exato:
    Thought: Considerando o impacto e urg√™ncia...
    Final Answer: [PRIORIDADE] - Justificativa da classifica√ß√£o""",
    expected_output="PRIORIDADE (em mai√∫sculo) seguido de justificativa",
    agent=AG2
)

Task_AG3 = Task(
    description="""Fa√ßa uma an√°lise t√©cnica detalhada do problema.
    Use o formato exato:
    Thought: Analisando tecnicamente o problema...
    Final Answer: 
    Sistema: [sistema afetado]
    Problema: [descri√ß√£o t√©cnica]
    Impacto: [avalia√ß√£o do impacto]
    Solu√ß√£o: [proposta de solu√ß√£o]""",
    expected_output="An√°lise t√©cnica estruturada com os campos acima",
    agent=AG3
)

Task_AG4 = Task(
    description="""Gerencie o fluxo do chamado verificando classifica√ß√µes e definindo a√ß√µes.
    Use o formato exato:
    Thought: Avaliando o encaminhamento...
    Final Answer:
    Status: [status atual]
    Pr√≥xima A√ß√£o: [a√ß√£o necess√°ria]
    Respons√°vel: [setor/pessoa]
    Observa√ß√µes: [notas importantes]""",
    expected_output="Status e plano de a√ß√£o estruturado",
    agent=AG4
)

Task_AG5 = Task(
    description="""Gere um relat√≥rio final consolidando todas as informa√ß√µes do chamado.
    Use o formato exato:
    Thought: Consolidando informa√ß√µes...
    Final Answer:
    === RELAT√ìRIO DO CHAMADO ===
    Setor: [setor classificado]
    Prioridade: [n√≠vel de prioridade]
    An√°lise T√©cnica: [resumo da an√°lise]
    Status: [situa√ß√£o atual]
    A√ß√µes: [a√ß√µes tomadas/planejadas]
    Conclus√£o: [resumo final]""",
    expected_output="Relat√≥rio estruturado com todos os campos acima",
    agent=AG5
)

def processar_chamados():
    try:
        # Conectar ao NeonDB
        conn = psycopg2.connect(NEON_DB_URL)
        cur = conn.cursor()
        
        # Verificar se h√° chamados abertos
        cur.execute("SELECT COUNT(*) FROM chamados WHERE status = 'Aberto';")
        total_abertos = cur.fetchone()[0]
        
        if total_abertos == 0:
            logger.info("‚ÑπÔ∏è Nenhum chamado aberto encontrado")
            return

        logger.info(f"üìä Total de chamados abertos: {total_abertos}")
        
        # Criar a equipe com configura√ß√µes de tempo limite
        crew = Crew(
            agents=[AG1, AG2, AG3, AG4, AG5],
            tasks=[Task_AG1, Task_AG2, Task_AG3, Task_AG4, Task_AG5],
            verbose=True,
            max_iter=15,  # Limite de itera√ß√µes por agente
            memory=True   # Habilita mem√≥ria entre agentes
        )

        # Processar cada chamado
        cur.execute("SELECT id, descricao FROM chamados WHERE status = 'Aberto';")
        chamados = cur.fetchall()
        
        for chamado in chamados:
            chamado_id = chamado[0]
            chamado_data = {
                "descricao": chamado[1],
                "ID": str(chamado_id)
            }
            
            logger.info(f"\nüöÄ INICIANDO CHAMADO {chamado_id}")
            logger.info(f"üìù DESCRI√á√ÉO: {chamado_data['descricao']}")
            
            try:
                # Executar com timeout de 3 minutos
                resultado = crew.kickoff(
                    inputs=chamado_data
                )
                logger.info(f"‚úÖ Processamento do chamado {chamado_id} conclu√≠do!")
                logger.info(f"üìú Resultado final do chamado: {resultado}")
                
                # Atualizar status do chamado no banco
                cur.execute(
                    "UPDATE chamados SET status = 'Processado' WHERE id = %s",
                    (chamado_id,)
                )
                conn.commit()
                
            except Exception as e:
                logger.error(f"‚ùå Erro no processamento do chamado {chamado_id}: {str(e)}")
                logger.error("‚ö†Ô∏è Marcando chamado como 'Erro' para revis√£o manual")
                cur.execute(
                    "UPDATE chamados SET status = 'Erro' WHERE id = %s",
                    (chamado_id,)
                )
                conn.commit()
                conn.rollback()

    except Exception as e:
        logger.error(f"‚ùå Erro na conex√£o com o banco de dados: {str(e)}")
        logger.error("‚ö†Ô∏è Verifique as configura√ß√µes de conex√£o no arquivo .env")
    
    finally:
        if 'cur' in locals():
            cur.close()
        if 'conn' in locals():
            conn.close()
        logger.info("üèÅ Processamento finalizado")

if __name__ == "__main__":
    processar_chamados()
